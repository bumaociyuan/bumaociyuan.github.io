{"entries":[{"title":"Archive","baseurl":"","url":"/archive/index.html","date":null,"categories":[],"body":"2014 October October 27, 2014 » ruby note October 26, 2014 » automator pass arg to shell script October 26, 2014 » shell script create post template October 23, 2014 » jekyll blog theme October 21, 2014 » ios app 安装机制 October 21, 2014 » 【转】如何高效利用GitHub October 19, 2014 » app store short url October 16, 2014 » run shell script by double click October 15, 2014 » code format October 11, 2014 » python setting on windows7 October 9, 2014 » url schemes October 1, 2014 » mac 自定义 menu item keyboard shortcut September September 30, 2014 » chmod September 29, 2014 » block note September 26, 2014 » spotlight no result September 16, 2014 » curl note September 15, 2014 » project cannot build on iphone5s September 10, 2014 » ios bug September 5, 2014 » vim note September 5, 2014 » shell note August August 29, 2014 » make a cocoapods lib August 28, 2014 » Disable UISearchBar begin editing animation August 25, 2014 » Enable php on mac August 19, 2014 » AFNetworking issues August 12, 2014 » baidu map issues August 8, 2014 » navigation bar customize back button August 1, 2014 » ios webview bottom black July July 29, 2014 » ios webview block detect iphone number July 26, 2014 » group style tableview background color in ios 7 July 23, 2014 » hide static tableview section July 23, 2014 » haha June June 26, 2014 » github fork a repo branch June 25, 2014 » git on google drive June 20, 2014 » iOS style guide June 20, 2014 » xcode errors June 18, 2014 » google addresses June 17, 2014 » delete .DS_Store -r June 17, 2014 » git note June 17, 2014 » ruby change source June 13, 2014 » jekyll blog deploy github pages March March 27, 2014 » name from Images.xcassets March 17, 2014 » 小米电视安装第三方apk March 15, 2014 » iOS 7.1 sharesdk 兼容 March 15, 2014 » IOS 7.1 drop box download January January 8, 2014 » Mac 重装系统 January 7, 2014 » 百度appkey 申请流程 2013 December December 19, 2013 » 百度地图SDK2.1 bug December 10, 2013 » vb based browser December 10, 2013 » Ad hoc 教程 3 ==> ipa 的远程安装 November November 16, 2013 » ios unlimited args method October October 26, 2013 » Ad hoc 教程 2==> 通过itunes安装ipa October 24, 2013 » free vpn October 23, 2013 » Ad hoc 教程 1 ==> 生成证书 October 14, 2013 » xcode 编译错误 October 14, 2013 » Introduction to CocoaPods October 12, 2013 » xcode find and replace with regex September September 19, 2013 » iOS Icon 尺寸 September 6, 2013 » 苹果开发证书申请 August August 21, 2013 » 真机调试 July July 26, 2013 » 用apple script写自动开启wallproxy的命令 "},{"title":"Category","baseurl":"","url":"/categories/index.html","date":null,"categories":[],"body":" breakwall 3 ios 35 vb 1 android 1 jekyll 2 ruby 2 git 4 terminal 8 other 1 mac 2 python 1 breakwall google addresses free vpn 用apple script写自动开启wallproxy的命令 ios ios app 安装机制 app store short url code format url schemes block note project cannot build on iphone5s ios bug make a cocoapods lib Disable UISearchBar begin editing animation Enable php on mac AFNetworking issues baidu map issues navigation bar customize back button ios webview bottom black ios webview block detect iphone number group style tableview background color in ios 7 hide static tableview section iOS style guide xcode errors name from Images.xcassets iOS 7.1 sharesdk 兼容 IOS 7.1 drop box download Mac 重装系统 百度appkey 申请流程 百度地图SDK2.1 bug Ad hoc 教程 3 ==> ipa 的远程安装 ios unlimited args method Ad hoc 教程 2==> 通过itunes安装ipa Ad hoc 教程 1 ==> 生成证书 xcode 编译错误 Introduction to CocoaPods xcode find and replace with regex iOS Icon 尺寸 苹果开发证书申请 真机调试 vb vb based browser android 小米电视安装第三方apk jekyll jekyll blog theme jekyll blog deploy github pages ruby ruby note ruby change source git 【转】如何高效利用GitHub github fork a repo branch git on google drive git note terminal automator pass arg to shell script shell script create post template run shell script by double click chmod curl note vim note shell note delete .DS_Store -r other haha mac mac 自定义 menu item keyboard shortcut spotlight no result python python setting on windows7 "},{"title":"不毛次元","baseurl":"","url":"/index.html","date":null,"categories":[],"body":" "},{"title":"Tag","baseurl":"","url":"/tags/index.html","date":null,"categories":[],"body":" automator 2 applescript 1 cocoapods 2 tutorial 5 google 1 vim 1 windows 1 xcode 1 plugin 1 reblog 1 shell 2 automator automator pass arg to shell script 用apple script写自动开启wallproxy的命令 applescript 用apple script写自动开启wallproxy的命令 cocoapods make a cocoapods lib Introduction to CocoaPods tutorial ruby note block note make a cocoapods lib git on google drive Introduction to CocoaPods google google addresses vim vim note windows python setting on windows7 xcode code format plugin code format reblog 【转】如何高效利用GitHub shell automator pass arg to shell script shell script create post template "},{"title":"Pages","baseurl":"","url":"/pages.html","date":null,"categories":[],"body":"All Pages Archive Category 不毛次元 Tag Pages "},{"title":"用apple script写自动开启wallproxy的命令","baseurl":"","url":"/breakwall/2013/07/26/apple-script.html","date":"2013-07-26 19:58:50 +0800","categories":["breakwall"],"body":"---2014.10.27--- Automator -> Application -> Run Shell Script 如下图 click cmd+s File Format as Application 如下图 System Preferences -> Usres & Groups -> Login Items ->plus button->select the app you just created ---2013-07-26--- 打开 as编辑器 tell the application \"Terminal\" do script \"python /Users/noteant-3/Documents/ wallproxy-master/local/startup.py\" close the 1st window end tell quit save as app 右键显示包内容可以修改 icon icon binder 可以简单生成 icon 最后在login items 加入 wallproxy app 就ok了 "},{"title":"真机调试","baseurl":"","url":"/ios/2013/08/21/%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95.html","date":"2013-08-21 18:58:50 +0800","categories":["ios"],"body":" 申请证书，双击加入系统钥匙串，右键从秘钥里面到处.p12 文件 双击加入钥匙串，首次需要设置密码，输入密码确认。 在developer center 中 的 Devices 加入 device id 下载新的 provision 文件 导入xcode 最后将bundle indentifier 改为 com.companyName.XXX project 和 targets 里面的Build Settings 的code signing 中的一三五项 选为 新加入的 证书 "},{"title":"苹果开发证书申请","baseurl":"","url":"/ios/2013/09/06/%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7.html","date":"2013-09-06 18:58:50 +0800","categories":["ios"],"body":"首先登陆developer.apple.com 点击 certificates开始创建新cer 选择证书类型：开发证书好像只能请一个，第二个是推送的开发证书，production的第一个就是发布证书 然后生成certSigningRequest， 点击keychain 如下图 然后 email 最好输 apple 账号的证书 common name 就是 这个key 的名字 ca email 不填 选saved to disk click continue choose File 刚刚生成的 certSigningRequest 点击Generate 如下图 添加APP ID 点击 App IDs 新建 App ID Description 就是Description 选择Wildcard App ID 填 类似com.companyname.* 生成通用app id（pushID 需要选择Explicit App ID） 点击Devices 添加设备，输入名字和UDID即可 最后生成Provisioning Profiles 选择类型 下一步选择 App ID 再下一步选择证书 再下一步选择设备（Distribution 不用这步） 再下一步输入name 最后生成 生成后下载 调试： 双击cer文件 双击provisioning 文件或者直接拖进 xcode organizer xcode 中的 targets 和 project 选择证书 注意 bundle identifier 要和 App ID 一致 然后选择真机就可以调试了 "},{"title":"iOS Icon 尺寸","baseurl":"","url":"/ios/2013/09/19/iconSize.html","date":"2013-09-19 00:06:50 +0800","categories":["ios"],"body":"Icon Icon-Small.png 29*29 Icon-Small@2x.png 58*58 Icon-Small-50.png 50*50 Icon-Small-50@2x.png 100*100 Icon.png 57*57 Icon@2x.png 114*114 Icon-72.png 72*72 Icon-72@2x.png 144*144 new added Icon-76.png 76*76 Icon-120.png 120*120 Icon-152.png 152*152 iTunesArtwork 512*512 "},{"title":"xcode find and replace with regex","baseurl":"","url":"/ios/2013/10/12/xcode-find-replace-with-regex.html","date":"2013-10-12 00:06:50 +0800","categories":["ios"],"body":"reference stackoverflow example search: NSLocalizedString(@\"words\", nil) with regex: (NSLocalizedString\\()(@\"\\w+\")(, nil\\)) relace regex: ZXLocalizeble\\(\\2\\) replace all result: ZXLocalizeble(@\"words\") insert return press ctrl+q press return "},{"title":"Introduction to CocoaPods","baseurl":"","url":"/ios/2013/10/14/introduction-to-cocoapods.html","date":"2013-10-14 00:06:50 +0800","categories":["ios"],"body":"references: raywenderlich sudo gem install cocoapods error: To solve this error run this command : sudo xcode-select -switch /Applications/Xcode.app platform :ios, \"7.0\" pod install --verbose --no-repo-update pod update --verbose --no-repo-update "},{"title":"xcode 编译错误","baseurl":"","url":"/ios/2013/10/14/xcode-%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF.html","date":"2013-10-14 00:06:50 +0800","categories":["ios"],"body":"error: Command /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang failed with exit code 1 解决方法： 将Apple LLVM compiler 4.2 - Language ->c++ Standard Library 修改为 libstdc++ （GNU C++ standard library） "},{"title":"Ad hoc 教程 1 ==> 生成证书","baseurl":"","url":"/ios/2013/10/23/ad-hoc-1.html","date":"2013-10-23 00:06:50 +0800","categories":["ios"],"body":"流程参考 苹果开发证书申请 在Devices 加入 测试机 UDID 生成Provisioning Profiles 选择Ad Hoc 在测试机上 安装 生成的Ad Hoc provision 文件 打包ipa时选择ad Hoc "},{"title":"free vpn","baseurl":"","url":"/breakwall/2013/10/24/free-vpn.html","date":"2013-10-24 00:06:50 +0800","categories":["breakwall"],"body":"download Onavo app 运行，按指示操作，安装provision 文件进入系统设置->通用->VPN选 圈i 关闭按需连接ok需要用的时候 ，进入系统设置 打开VPN就 可以使用了。 "},{"title":"Ad hoc 教程 2==> 通过itunes安装ipa","baseurl":"","url":"/ios/2013/10/26/ad-hoc-2.html","date":"2013-10-26 00:06:50 +0800","categories":["ios"],"body":" 通过iPhone 浏览器 下载证书 .mobileprovision 选择安装 连接iPhone 到电脑 并打开iTunes 双击ipa 文件 点击 install 点击Apply "},{"title":"ios unlimited args method","baseurl":"","url":"/ios/2013/11/16/ios-unlimited-args-method.html","date":"2013-11-16 00:06:50 +0800","categories":["ios"],"body":"- (void)showErrorWithTitle:(NSString *)title message:(NSString *)message cancelButtonTitle:(NSString *)cancelButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ... { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:title message:message delegate:nil cancelButtonTitle:cancelButtonTitle otherButtonTitles:nil]; va_list args; va_start(args, otherButtonTitles); for (NSString *arg = otherButtonTitles; arg != nil; arg = va_arg(args, NSString*)) { [alert addButtonWithTitle:arg]; } va_end(args); [alert show]; [alert release];} "},{"title":"Ad hoc 教程 3 ==> ipa 的远程安装","baseurl":"","url":"/ios/2013/12/10/ad-hoc-3.html","date":"2013-12-10 00:06:50 +0800","categories":["ios"],"body":"Ad hoc 是苹果的内测机制，可以给所有注册的device 安装内测ipa。 首先申请ad hoc 证书 在dev center 加入设备udid 设备下载 mobleprovision文件 生成ipa,并安装(安装可以用itunes，安装或者远程安装) 注意打包时不能连接手机！特别是5s 不然会出现5s可以安装，其他设备不能安装的bug，原因是5s 是64位 生成证书参考: Ad hoc 教程 1 ==> 生成证书 用itunes安装参考: Ad hoc 教程 2==> 通过itunes安装ipa ipa 的远程安装 主要是使用苹果的itms协议 通过safari打开 itms-services://?action=download-manifest&url=http://10.0.0.23:8000/srp.plist 或者应用内调用 【UIApplication shareApplication】openUrl 的方法打开 itms-services://?action=download-manifest&url=http://10.0.0.23:8000/srp.plist 标准plist ==> statard.plist demo plist ==> srp.plist 需要配置的 字段 bundle-identifier ==> bundle identifier # 必须 bundle-version ==> bundle version title ==> 安装的时候显示的title software-package ==> ipa url # 必须 display-image ==> 144 * 144 icon url full-size-image ==> 512 * 512 icon url "},{"title":"vb based browser","baseurl":"","url":"/vb/2013/12/10/vb-based-browser.html","date":"2013-12-10 00:06:50 +0800","categories":["vb"],"body":"参考视频教学 youtube 需要两个三方库 sourceCode ChromeBasedWebBrowser.rar , xulrunner-1.9.en-US.win32.zip 1，新建一个class 继承 Skybound.Gecko.GeckoWebBrowser Imports Skybound.Gecko Public Class FasterBrowser Inherits GeckoWebBrowser End Class 2，在ui 上加入 new class 3， Imports Skybound.Gecko Public Class Form1 Sub New() InitializeComponent() Xpcom.Initialize(Environment.CurrentDirectory + \"lrunner\") End Sub Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click FasterBrowser1.Navigate(\"http://www.zmaitech.com\") End Sub End Class "},{"title":"百度地图SDK2.1 bug","baseurl":"","url":"/ios/2013/12/19/baidu-map-2.1-bug.html","date":"2013-12-19 00:06:50 +0800","categories":["ios"],"body":"error occur at; _mapManager = [[BMKMapManager alloc]init]; error message: -[__NSCFString stringFromMD5]: unrecognized selector sent to instance 0x145925d0 resolve: other linker flags 添加 -Objc 或者-all_load Project ->build settings ->linking->Other Linker flags "},{"title":"百度appkey 申请流程","baseurl":"","url":"/ios/2014/01/07/baidu-appkey-register.html","date":"2014-01-07 00:06:50 +0800","categories":["ios"],"body":"http://lbsyun.baidu.com/apiconsole/key 百度的app key 申请中心，需要先注册 点击 应用名称：应用名称 human readable 应用类型：for mobile 禁用服务：不选 安全码： 应用唯一标识符 bundle identifier save "},{"title":"Mac 重装系统","baseurl":"","url":"/ios/2014/01/08/mac-reinstall-system.html","date":"2014-01-08 00:06:50 +0800","categories":["ios"],"body":"http://product.pconline.com.cn/itbk/software/osx/1208/2894364.html "},{"title":"IOS 7.1 drop box download","baseurl":"","url":"/ios/2014/03/15/ios-7-drop-box-download.html","date":"2014-03-15 00:06:50 +0800","categories":["ios"],"body":"reference upload your app.plist to dropbox get shared link of app.plist, like https://www.dropbox.com/s/qgknrfngaxazm38/app.plist replace www.dropbox.com with dl.dropboxusercontent.com in the link, likehttps://dl.dropboxusercontent.com/s/qgknrfngaxazm38/app.plist write your download.html like INSTALL!! upload the download.html to dropbox get shared link of download.html, like https://www.dropbox.com/s/gnoctp7n9g0l3hx/download.html replace www.dropbox.com with dl.dropboxusercontent.com in the second link as well, likehttps://dl.dropboxusercontent.com/s/gnoctp7n9g0l3hx/download.html Now, visit https://dl.dropboxusercontent.com/s/gnoctp7n9g0l3hx/download.html in your device, you can install the app like before. WHAT A WONDERFUL WORLD！ "},{"title":"iOS 7.1 sharesdk 兼容","baseurl":"","url":"/ios/2014/03/15/ios-7-sharesdk.html","date":"2014-03-15 00:06:50 +0800","categories":["ios"],"body":"修改 build settings "},{"title":"小米电视安装第三方apk","baseurl":"","url":"/android/2014/03/17/mi-tv-install-3rd-part-apk.html","date":"2014-03-17 00:06:50 +0800","categories":["android"],"body":"视频 下载 Google ADB解锁工具包 运行 cmd cd 到 adb 文件夹 并连接 mi tv 的ip adb install file path 安装apk "},{"title":"name from Images.xcassets","baseurl":"","url":"/ios/2014/03/27/name-from-images-xcassets.html","date":"2014-03-27 00:06:50 +0800","categories":["ios"],"body":" LaunchImage-700@2x~iphone LaunchImage-700-568h@2x~iphone LaunchImage-700-Portrait~ipad LaunchImage-700-Portrait@2x~ipad LaunchImage-700-Landscape~ipad LaunchImage-700-Landscape@2x~ipad AppIcon72x72@2x AppIcon72x72 AppIcon60x60@2x AppIcon50x50@2x AppIcon50x50 AppIcon29x29@2x AppIcon29x29 "},{"title":"jekyll blog deploy github pages","baseurl":"","url":"/jekyll/2014/06/13/jekyll-blog-deploy-github-pages.html","date":"2014-06-13 20:06:50 +0800","categories":["jekyll"],"body":"document cn Jekyll Introduction sites using jekyll github pages document Host on GitHub in 3 Minutes Create a New Repository Go to your https://github.com and create a new repository named USERNAME.github.com install jekyll http://jekyllrb.com/ gem install jekyll jekyll new my-awesome-site cd my-awesome-site jekyll serve //Now browse to http://localhost:4000 cp my-awesome-site path/of/USERNAME.github.com Write .md file in _post dir cd path/of/USERNAME.github.com jekyll build //auto create HTML file in _site dir jekyll serve //preview in port 4000 commit ur changes to github,visit USERNAME.github.io "},{"title":"ruby change source","baseurl":"","url":"/ruby/2014/06/17/ruby-change-source.html","date":"2014-06-17 00:06:50 +0800","categories":["ruby"],"body":"$ gem sources --remove https://rubygems.org/ $ gem sources -a http://ruby.taobao.org/ $ gem sources -l *** CURRENT SOURCES *** http://ruby.taobao.org # 请确保只有 ruby.taobao.org $ gem install rails "},{"title":"git note","baseurl":"","url":"/git/2014/06/17/git-note.html","date":"2014-06-17 03:06:50 +0800","categories":["git"],"body":"init git init add remote url git remote add origin repo-url delete remote url git remote rm origin clone from remote git clone repo-url check status git status add all changes git add . #add all file in current folder git add -A #git add some file git add file-path commit to repo git commit -m 'comment' remove all commits not in origin/master git reset --hard origin/master push to remote git push log git log #查看最近 提交 git log -10 #查看最近 提交 -10 git log --graph #查看最近 提交 --graph gitk #GUI查看提交记录，需要用homebrew 升级git gitk file-path #GUI查看filefile-path提交记录 checkout git checkout . git checkout <commit number> <filename> #**常用** git checkout 3f33b7959ff97715d69e418620895d98b811f8cb folder-name/* #恢复某folder-name下所有文件到 3f33b7959ff97715d69e418620895d98b811f8cb 撤销提交 git revert view branches git branch #查看本地分支 git branch -a #查看本地和服务器分支 create new branch git branch new-branch-name switch branch git checkout branch-name #切换到branch-name merge branch1 to branch2 git checkout branch1 git merge branch2 delete branch git branch -D branch-name #删除本地分支branch-name git push origin --delete branch-name #删除服务器分支branch-name 基于远程跟踪分支创建本地分支 git checkout --track -b branch-name-on-local origin/branch-name-on-server git merge from new branch to master git checkout master git merge new-branch-name diff git diff master origin/master push to server git push origin branch-name-on-server tag git tag #查看所有标签 git tag v0.1.2-light #创建轻量标签 git tag -a v0.1.2 -m “0.1.2版本” #创建附注标签 git checkout tag-name git tag -d v0.1.2 #删除标签 git tag -a v0.1.1 9fbc3d0 #补打标签 git push --tags 通常的git push不会将标签对象提交到git服务器，我们需要进行显式的操作： git push origin tag-name #将tag-name标签提交到git服务器 git push origin –tags #将本地所有标签一次性提交到git服务器 push all git push --all origin #push 所有tag 和所有branch到服务器 "},{"title":"delete .DS_Store -r","baseurl":"","url":"/terminal/2014/06/17/delete-DS_Store.html","date":"2014-06-17 20:06:50 +0800","categories":["terminal"],"body":"find dir-path -name .DS_Store -delete or cd to the path find . -name .DS_Store -delete "},{"title":"google addresses","baseurl":"","url":"/breakwall/2014/06/18/google-addresses.html","date":"2014-06-18 19:06:50 +0800","categories":["breakwall"],"body":"---2014.10.23--- http://173.194.121.28/ https://github.com/bumaociyuan/wiki ---2014.09.26--- http://64.233.161.104 http://64.233.167.104 http://64.233.189.104/ 美国 www.google.com 中国大陆 www.google.cn hk www.google.com.hk 日本 www.google.co.jp 沙特阿拉伯 www.google.com.sa 巴西 www.google.com.br 瑞士 www.google.ch 荷兰 www.google.nl 澳大利亚 www.google.com.au 印度 www.google.co.in 罗马尼亚 www.google.ro 泰国 www.google.co.th 马来西亚 www.google.com.my 加拿大 www.google.ca 德国 www.google.de 墨西哥 www.google.com.mx 埃及 www.google.com.eg 智利 www.google.cl 以色列 www.google.co.il 法国 www.google.fr 土耳其 www.google.com.tr 希腊 www.google.gr 新加坡 www.google.com.sg 阿联酋 www.google.ae 中国台湾 www.google.com.tw 英国 www.google.co.uk 瑞典 www.google.se 波兰 www.google.pl 西班牙 www.google.es 阿根廷 www.google.com.ar 意大利 www.google.it 中国香港 www.google.com.hk 比利时 www.google.be 德国 www.google.de 法国 www.google.fr 英国 www.google.co.uk 日本特别行政区 www.google.co.jp 韩国 www.google.co.kr 意大利 www.google.it 瑞士 www.google.ch 加拿大 www.google.ca 以色列 www.google.co.il 荷兰 www.google.nl 比利时 www.google.be 智利 www.google.cl 阿根廷 www.google.com.ar 巴拿马 www.google.com.pa 奥地利 www.google.at 波兰 www.google.pl 俄罗斯 www.google.com.ru 巴西 www.google.com.br 新西兰 www.google.co.nz 维京群岛 www.google.vg "},{"title":"xcode errors","baseurl":"","url":"/ios/2014/06/20/xcode-errors.html","date":"2014-06-20 02:28:50 +0800","categories":["ios"],"body":"Mach O Link Error- linker command failed with exit code 1 (use -v to see invocation) link \"build active architecture only\" to yes "},{"title":"iOS style guide","baseurl":"","url":"/ios/2014/06/20/ios-style-guide.html","date":"2014-06-20 16:47:50 +0800","categories":["ios"],"body":"命名 0.文件命名 Tip 文件名须反映出其实现了什么类 – 包括大小写。遵循你所参与项目的约定。 类别的文件名应该包含被扩展的类名，如：GTMNSString+Utils.h 或 GTMNSTextView+Autocomplete.h 。 1. 变量命名 Tip 方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。 变量命名需要能明白两点 变量意思 变量类型 BOOL型 以 is 开头 如： //GOOD BOOL isShouldReload; BOOL isLoading; //AVOID BOOL k; Array 型 以 s 结尾 或者 Array 如： NSArray *users; NSArray *messages Dictionary 以 Dic 结尾 或服务器返回对象 NSDictionary *dateDic; NSDictionary *message; String 以 String 结尾 ，字段可以不用 String 结尾 NSString *urlString; @property (nonatomic,strong) NSString * topId;//尽量与服务器统一 UI Class 以 class 结尾 尽量不使用 btn tv 等简写 如： //GOOD UIButton *loginButton UITextField *passwordTextField; //AVOID UIButton *login; UITextField *password; Block 以 on 开头 typedef void(^OnCompletion)(API *, id value); typedef void(^OnFailed)(API *, id error); OnCompletion onCompletion; OnFailed onFailed; 2. 方法命名 fds "},{"title":"git on google drive","baseurl":"","url":"/git/2014/06/25/git-on-google-drive.html","date":"2014-06-25 18:51:50 +0800","categories":["git"],"body":"link Now, create a folder in your Google Drive folder called “git”. You want this folder as git produces a lot of files and you may want other stuff on your google drive besides your code repository. mkdir \\Users\\JoeUser\\Google Drive\\git CD yourself to your project folder (or whatever folder you want to have git control over). cd \\my-project-path Now, in the projects folder, perform the following git commands git init git add . git commit -m \"first commit\" Now we go to Google Drive and create a bare git repo (note that the backslash between Google and Drive should be exactly there) cd \\Users\\JoeUser\\Google Drive\\git git init --bare my-project.git cd \\my-project-path git remote add origin /Users/JoeUser/Google\\ Drive/git/my-project.git git push -u origin master To checkout this project from another machine, you simply make sure you have google drive on that machine and type cd /the_location_I_want_to_checkout_the_repo git clone /Users/JoeUser/Google\\ Drive/git/project1.git "},{"title":"github fork a repo branch","baseurl":"","url":"/git/2014/06/26/github-fork-a-repo-branch.html","date":"2014-06-26 17:23:50 +0800","categories":["git"],"body":"link I don’t know a native way yet, but you can do it following this recipe: Fork the repository in question (called ‘upstream’) on the GitHub website to your workspace there. Run the GitHub desktop application and clone the repository onto your PC. Use the GitHub desktop application to open a shell in the repository. (The git commands are not available from the default PowerShell unless you configure that manually.) Set the source repository as upstream: git remote add upstream https://github.com/{user}/{source-repo}.git Fetch the full upstream repository. (Right now, you only have a copy of its master branch.) git fetch upstream Make your file system copy the branch you want and give it any name: git checkout upstream/{branch-in-question} git checkout -b temporary Publish your repo using the GitHub desktop application. On the GitHub website, open your repository and click ‘settings’. Change the “Default branch” to ‘temporary’. (Just change the drop-down menu, you don’t need to click the “Rename” button.) Go back to your repository, go to the ‘branches’ tab, now you can delete the “master” branch. Delete the master branch on your shell and make a new master branch: git branch -d master git branch master git checkout master git -d temporary Once more, publish your repo using the GitHub desktop application. On the GitHub website, open your repository and click ‘settings’. Change the “Default branch” back to the (new) ‘master’ branch. Go back to your repository, go to the ‘branches’ tab, now you can delete the “temporary” branch. This should be what you were looking for. Perhaps GitHub will provide a more convenient way to do this in future (e.g., clicking “Fork” from a project’s branch results in exactly this behaviour). "},{"title":"haha","baseurl":"","url":"/other/2014/07/23/haha.html","date":"2014-07-23 03:39:50 +0800","categories":["other"],"body":"今天macbook pro 到了 心情大好 发个blog 纪念一哈 屌丝的电脑 哈哈哈 "},{"title":"hide static tableview section","baseurl":"","url":"/ios/2014/07/23/hide-static-tableview-section.html","date":"2014-07-23 17:08:00 +0800","categories":["ios"],"body":"主要是实现以下几个方法 -(UIView*)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section { if(section == 1 && hideTableSection) return [[UIView alloc] initWithFrame:CGRectZero]; return nil; } - (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section { if(section == 1 && hideTableSection) return 1; return 32; } -(CGFloat)tableView:(UITableView *)tableView heightForFooterInSection:(NSInteger)section { if(section == 1 && hideTableSection) return 1; return 16; } -(UIView*)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section { if(section == 1 && hideTableSection) return [[UIView alloc] initWithFrame:CGRectZero]; return nil; } - (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section { if(section == 1) { if(hideTableSection) return 0; else return 1; } else { return 2; } } "},{"title":"group style tableview background color in ios 7","baseurl":"","url":"/ios/2014/07/26/group-style-tableview-background-color-in-ios-7.html","date":"2014-07-26 01:14:00 +0800","categories":["ios"],"body":"group style tableview background color in ios 7 [UIColor colorWithRed:0.933 green:0.933 blue:0.957 alpha:1.000] hex : EDEDF4 "},{"title":"ios webview block detect iphone number","baseurl":"","url":"/ios/2014/07/29/ios-webview-block-detect-iphone-number.html","date":"2014-07-29 19:25:00 +0800","categories":["ios"],"body":"add this in html head tag <meta content=\"telephone=no\" name=\"format-detection\" /> "},{"title":"ios webview bottom black","baseurl":"","url":"/ios/2014/08/01/ios-webview-bottom-black.html","date":"2014-08-01 22:09:00 +0800","categories":["ios"],"body":"self.webView.opaque = NO; "},{"title":"navigation bar customize back button","baseurl":"","url":"/ios/2014/08/08/navigation-bar-customize-back-button.html","date":"2014-08-08 19:09:00 +0800","categories":["ios"],"body":"in AppDelegate.m UINavigationBar * bar = [UINavigationBar appearance]; bar.backIndicatorImage = [UIImage imageNamed:@\"navBackButton\"]; bar.backIndicatorTransitionMaskImage = [UIImage imageNamed:@\"navBackButton\"]; in BaseViewController.m -viewdidload self.navigationItem.leftItemsSupplementBackButton = YES; self.navigationItem.backBarButtonItem = [self textBarButtonItemWithText:@\"\"]; cannot handle the back bar button item click event "},{"title":"baidu map issues","baseurl":"","url":"/ios/2014/08/12/baidu-map-issue.html","date":"2014-08-12 17:58:00 +0800","categories":["ios"],"body":"关于百度地图IOS API 2.3.0 不显示地图的解决方法。 在AppDelegate里面init BMapManager以后。 设为属性 不然会出各种问题 "},{"title":"AFNetworking issues","baseurl":"","url":"/ios/2014/08/19/afnetworking-issue.html","date":"2014-08-19 22:28:00 +0800","categories":["ios"],"body":"error : Request failed: unacceptable content-type: text/html or The operation couldn’t be completed (Cocoa error 3840 ) fix this issue AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager new]; NSMutableSet *set = manager.responseSerializer.acceptableContentTypes.mutableCopy; [set addObject:@\"text/html\"]; manager.responseSerializer.acceptableContentTypes = set; "},{"title":"Enable php on mac","baseurl":"","url":"/ios/2014/08/25/enable-php-on-mac.html","date":"2014-08-25 05:07:00 +0800","categories":["ios"],"body":"link Navigate to /etc/apache2 Do a search for “php”. You should see the following line: #LoadModule php5_module libexec/apache2/libphp5.so Remove the “#” Save the file. You may need to authenticate upon saving. run sudo apachectl restart to restart apache visit localhost you will see It works! /etc/apache2/httpd.conf Search for “virtual” in your text editor. You should see the following lines: #Virtual hosts #Include /private/etc/apache2/ extra/httpd- Uncomment the second line that starts with “#Include” by removing the “#”. We now need to modify httpd-vhosts.conf file to add our virtual hosts. open /etc/apache2/extra/httpd-vhosts.conf DocumentRoot \"/Users/username/Sites/Website\" ServerName yourwebsitename Another tutorial Install : XAMPP Mac OS X 1.7.3 download sudo su /Applications/XAMPP/xamppfiles/xampp start if you see XAMPP: Starting ProFTPD.../Applications/XAMPP/xamppfiles/xampp: line 184: /Applications/XAMPP/xamppfiles//var/proftpd/start.err: No such file or directory fail. Contents of \"/Applications/XAMPP/xamppfiles//var/proftpd/start.err\": cat: /Applications/XAMPP/xamppfiles//var/proftpd/start.err: No such file or directory do these commands sudo mkdir /Applications/XAMPP/xamppfiles/var/proftpd/ touch /Applications/XAMPP/xamppfiles/var/proftpd/start.err sudo /Applications/XAMPP/xamppfiles/xampp fix_rights then redo the /Applications/XAMPP/xamppfiles/xampp start cmd in http://localhost you can see the test site "},{"title":"Disable UISearchBar begin editing animation","baseurl":"","url":"/ios/2014/08/28/disable-uisearchbar-begin-editing-animation.html","date":"2014-08-28 17:24:00 +0800","categories":["ios"],"body":" Do not use searchBar as tableHeaderView That's all. "},{"title":"make a cocoapods lib","baseurl":"","url":"/ios/2014/08/29/make-a-cocoapods-lib.html","date":"2014-08-29 21:54:52 +0800","categories":["ios"],"body":"nshipster blog http://guides.cocoapods.org/ Your First CocoaPod demo : link create NSString-BlockHelper.podspec Pod::Spec.new do |s| s.name = 'NSString-BlockHelper' s.version = '1.0.0' s.license = { :type => 'MIT', :file => 'LICENSE.md' } s.summary = \"NSString+BlockHelper\" s.homepage = 'https://github.com/bumaociyuan/NSString-BlockHelper' s.authors = { 'bumaociyuan' => 'http://bumaociyuan.github.io/' } s.source = { :git => 'https://github.com/bumaociyuan/NSString-BlockHelper.git', :tag => s.version.to_s } s.source_files = 'NSString+BlockHelper/*{h,m}' s.requires_arc = true end set the tag git tag 1.0.0; git push --tags use the cmd pod trunk push NSString-BlockHelper.podspec --verbose to push .podspec to repo "},{"title":"shell note","baseurl":"","url":"/terminal/2014/09/05/shell-note.html","date":"2014-09-05 00:41:50 +0800","categories":["terminal"],"body":"Linux Shell Scripting Tutorial v1.05r3 A Beginner's handbook link -----2014.10.25------- 创建以当前时间为文件名的 mkdir date +%Y%m%d split string=\"hello,world,i,like,you,babalala\" array=(${string//,/ }) for i in ${array[@]} do echo $i done join array=(${string//,/}) printf -v var \"%s-\" \"${array[@]}\" var=${var%?} -----2014-09-04------- 1. 记录命令历史 !! （”连续两个”!”），表示执行上一条指令 !n（这里的n是数字），表示执行命令历史中第n条指令，例如”!100”表示执行命令历史中第100个命令 !字符串（字符串大于等于1），例如!ta，表示执行命令历史中最近一次以ta为开头的指令。 2. 指令和文件名补全 按tab键，它可以帮你补全一个指令，也可以帮你补全一个路径或者一个文件名。连续按两次tab键，系统则会把所有的指令或者文件名都列出来。 3. 别名 alias * alias语法很简单，alias [命令别名]=[’具体的命令’]。 4. 通配符 在bash下，可以使用*来匹配零个或多个字符，而用?匹配一个字符。 5. 管道符 前面已经提过过管道符”|”，就是把前面的命令运行的结果丢给后面的命令。 6. 作业控制 当运行一个进程时， 你可以使它暂停（按Ctrl+z），然后使用fg命令恢复它 ，利用bg命令使他到后台运行，你也可以使它终止（按Ctrl+c）。 7. 变量 前面章节中笔者曾经介绍过环境变量PATH，这个环境变量就是shell预设的一个变量，通常shell预设的变量都是大写的。变量，说简单点就是使用一个较简单的字符串来替代某些具有特殊意义的设定以及数据。就拿PATH来讲，这个PATH就代替了所有常用命令的绝对路径的设定。因为有了PATH这个变量，所以我们运行某个命令时不再去输入全局路径，直接敲命令名即可。你可以使用echo命令显示变量的值。 使用env命令即可全部列出系统预设的全部系统变量了。不过登录的用户不一样这些环境变量的值也不一样。当前显示的就是root这个账户的环境变量了。下面笔者简单介绍一下常见的环境变量： 使用env命令即可全部列出系统预设的全部系统变量了。不过登录的用户不一样这些环境变量的值也不一样。当前显示的就是root这个账户的环境变量了。下面笔者简单介绍一下常见的环境变量： PATH 决定了shell将到哪些目录中寻找命令或程序 HOME 当前用户主目录 HISTSIZE 历史记录数 LOGNAME 当前用户的登录名 HOSTNAME 指主机的名称 SHELL 前用户Shell类型 LANG 语言相关的环境变量，多语言可以修改此环境变量 MAIL 当前用户的邮件存放目录 PWD 当前目录 env命令显示的变量只是环境变量，系统预设的变量其实还有很多，你可以使用set命令把系统预设的全部变量都显示出来。 set不仅可以显示系统预设的变量，也可以连同用户自定义的变量显示出来。用户自定义变量？是的，用户自己同样可以定义变量 myname=zx //不能有空格 myname='first name' set|grep myname //output : myname=zx myname=\"$myname\"dddd //变量内容可以累加其他变量的内容，需要**加双引号** set|grep myname //output : myname=zxdddd work=/Users/niko/work/handday/ cd $work pwd //output : /Users/niko/work/handday 8. 特殊符号 * ：代表零个或多个字符或数字。 ? ：只代表一个任意的字符 # ：这个符号在linux中表示注释说明的意思，即”#”后面的内容linux忽略掉。 \\ ：转义字符，将后面的特殊符号（例如”*” ）还原为普通字符。 | ：管道符，前面多次说过，它的作用在于将符号前面命令的结果丢给符号后面的命令。这里提到的后面的命令，并不是所有的命令都可以的，一般针对文档操作的命令比较常用，例如cat, less, head, tail, grep, cut, sort, wc, uniq, tee, tr, split, sed, awk等等，其中grep, sed, awk为正则表达式必须掌握的工具，在后续内容中详细介绍。 $ ：除了用于变量前面的标识符外，还有一个妙用，就是和’!’结合起来使用。 ls test.txt test.txt ls !$ ls test.txt test.txt ‘!$’表示上条命中中最后一个变量（也许称为变量不合适，总之就是上条命令中最后出现的那个东西）例如上边命令最后是test.txt那么在当前命令下输入!$则代表test.txt。 grep ：过滤一个或多个字符 cut ：截取某一个字段 -d ：后面跟分隔字符，分隔字符要用双引号括起来, -c ：后面接的是第几个字符, -f ：后面接的是第几个区块 sort ：用做排序 -t 分隔符 ：作用跟cut的-d一个意思, -n ：使用纯数字排序, -r ：反向排序, -u ：去重复 wc ：统计文档的行数、字符数、词数，常用的选项为：-l ：统计行数, -m ：统计字符数, -w ：统计词数 uniq ：去重复的行，笔者常用的选项只有一个：-c ：统计重复的行数，并把行数写在前面 ：分号。平时我们都是在一行中敲一个命令，然后回车就运行了，那么想在一行中运行两个或两个以上的命令如何呢？则需要在命令之间加一个”;”了。 [ ] ：中括号，中间为字符组合，代表中间字符中的任意一个 zx:terminal_study niko$ ls ddd error text zx:terminal_study niko$ ls t* text zx:terminal_study niko$ ls [te]* error text zx:terminal_study niko$ "},{"title":"vim note","baseurl":"","url":"/terminal/2014/09/05/vim-note.html","date":"2014-09-05 17:41:50 +0800","categories":["terminal"],"body":" vim基本命令 1. i #按一下i键,下端显示 --INSERT-- #插入命令,在vim中可能任意字符都有作用 3. Esc #退出i(插入)命令进行其它命令使用 6. :w #在编辑的过程中保存文件,相当于word中的ctrl+s 7. :! command 暂时离开 vi 到指令列模式下执行 command 的显示结果！例如 :!ls #在编辑过程中执行shell命令ls 8. :sh #进入shell命令行,执行完命令后ctrl+d退出重新进入vim编辑继续编辑 在shell命令下，执行ctrl+l完成清屏 9. :wq #保存文件并退出 10. ZZ #保存文件并退出,同上一个命令,注意大写 11. :q! #强制退出,不保存 14. :help i #查看插入命令帮助 15. u #撤消上一步操作 16. /someWord #查找someWord字符 17. :s /Fedora/Redhat #将Fedora字符替换为Redhat(只替换在光标所在的行) 18. dw #删除单词 dd #删除行 19. o #打开空白一行 20. vim + filename #进行文件最后一行进行编辑 21. vim +n filename #进入文件第n行进行编辑 VIM光标控制命令 h 向左移一个字符 j 向下移一行 k 向上移一行 l 向右移一个字符 G 移到文件的最后一行 w 移到下一个字的开头 W 移到下一个字的开头，忽略标点符号 b 移到前一个字的开头 B 移到前一个字的开头，忽略标点符号 L 移到屏幕的最后一行 nL 将光标移动到屏幕底行上的第 n 行 M 移到屏幕的中间一行 H 移到屏幕的第一行 nH 将光标移动到屏幕顶行下的第 n 行 e 移到下一个字的结尾 E 移到下一个字的结尾，忽略标点符号 ( 移到句子的开头 ) 移到句子的结尾 { 移到段落的开头 } 移到下一个段落的开头 0 移到当前行的第一列 ^ 移到当前行的第一个非空字符 $ 移到当前行的最后一个字符 + 移到下一行的第一个字符 \\- 移到前一行的第一个非空字符 屏幕调整 ctrl+e 将屏幕上滚一行 ctrl+y 将屏幕下滚一行 ctrl+u 将屏幕上滚半页 ctrl+d 将屏幕下滚半页 ctrl+b 将屏幕上滚一页 ctrl+f 将屏幕下滚一页 ctrl+l 重绘屏幕 z-return 将当前行置为屏幕的顶行 nz-return 将当前行下的第 n 行置为屏幕的顶行 z\\. 将当前行置为屏幕的中央 nz. 将当前行上的第 n 行置为屏幕的中央 z- 将当前行置为屏幕的底行 nz- 将当前行上的第 n 行置为屏幕的底行 进入插入模式 a 在光标后插入文本 A 在当前行插入文本 i 在光标前插入文本 I 在当前行前插入文本 o 在当前行的下边插入新行 O 在当前行的上边插入新行 s 删除光标所在处字符，并进入插入模式 S 删除光标所在的行，并进入插入模式 删除文本 x 删除光标处的字符 dw 删至下一个字的开头 dG 删除行，直到文件结束 dd 删除整行 db 删除光标前面的字 :n,md 从第 m 行开始往前删除 n 行 d, d$ 从光标处删除到行尾 ^h, backspace 插入时，删除前面的字符 ^w 插入时，删除前面的字 修改文本 rchar 用 char 替换当前字符 R text escape 用 text 替换当前字符直到按下 Esc 键 stext escape 用 text 代替当前字符 S 或 cctext escape 用 text 代替整行 cwtext escape 将当前字改为 text Ctext escape 将当前行余下的改为 text cG escape 修改至文件的末尾 ccursor_cmd text escape 从当前位置处到光标命令位置处都改为 text 查找与替换 /text 在文件中向前查找 text ?text 在文件中向后查找 text n 在同一方向重复查找 N 在相反方向重复查找 ftext 在当前行向前查找 text Ftext 在当前行向后查找 text ttext 在当前行向前查找 text，并将光标定位在 text 的第一个字符 Ttext 在当前行向后查找 text，并将光标定位在 text 的第一个字符 :set ic 查找时忽略大小写 :set noic 查找时对大小写敏感 :ranges/pat1/pat2/g 用 newtext 替换 oldtext :m,ns/oldtext/newtext 在 m 行通过 n，用 newtext 替换 oldtext & 重复最后的 :s 命令 :g/text1/s/text2/text3 查找包含 text1 的行，用 text3 替换 text2 :g/text/command 在所有包含 text 的行运行 command 所表示的命令 :v/text/command 在所有不包含 text 的行运行 command 所表示的命令 复制文本 yy 将当前行的内容放入临时缓冲区 nyy 将 n 行的内容放入临时缓冲区 p 将临时缓冲区中的文本放入光标后 P 将临时缓冲区中的文本放入光标前 \"(a-z)nyy 复制 n 行放入名字为圆括号内的可命名缓冲区，省略 n 表示当前行 \"(a-z)ndd 删除 n 行放入名字为圆括号内的可命名缓冲区，省略 n 表示当前行 \"(a-z)p 将名字为圆括号的可命名缓冲区的内容放入当前行后 \"(a-z)P 将名字为圆括号的可命名缓冲区的内容放入当前行前 撤消与重复 u 撤消最后一次修改 U 撤消当前行的所有修改 . 重复最后一次修改 , 以相反的方向重复前面的 f、F、t 或 T 查找命令 ; 重复前面的 f、F、t 或 T 查找命令 \"np 取回最后第 n 次的删除(缓冲区中存有一定次数的删除内容，一般为 9) n 重复前面的 / 或 ? 查找命令 N 以相反方向重复前面的 / 或 ? 命令 保存文本和退出 vi 命令 保存和/或退出操作 :w 保存文件但不退出 vi :w file 将修改保存在 file 中但不退出 vi :wq 或 ZZ 或 :x 保存文件并退出 vi :q! 不保存文件，退出 vi :e! 放弃所有修改，从上次保存文件开始再编辑 shell 转义命令 :!command 执行 shell 的 command 命令，如 :!ls :!! 执行前一个 shell 命令 :r!command 读取 command 命令的输入并插入，如 :r!ls 会先执行 ls，然后读入内容 :w!command 将当前已编辑文件作为 command 命令的标准输入并执行 command 命令，如 :w!grep all :cd directory 将当前工作目录更改为 directory 所表示的目录 :sh 将启动一个子 shell，使用 ^d(ctrl+d) 返回 vi :so file 在 shell 程序 file 中读入和执行命令 宏与缩写 (避免使用控制键和符号，不要使用字符 K、V、g、q、v、*、= 和功能键) :map key command seq 定义一个键来运行 command seq，如 :map e ea，无论什么时候都可以 e 移到一个字的末尾来追加文本 :map 在状态行显示所有已定义的宏 :umap key 删除该键的宏 :ab string1 string2 定义一个缩写，使得当插入 string1 时，用 string2 替换 string1。当要插入文本时，键入 string1 然后按 Esc 键，系统就插入了 string2 :ab 显示所有缩写 :una string 取消 string 的缩写 缩进文本 ctrl+i或 tab 插入文本时，插入移动的宽度，移动宽度是事先定义好的 :set ai 打开自动缩进 :set sw=n 将移动宽度设置为 n 个字符 n> 使 n 行都向右移动一个宽度，例如 3>> 就将接下来的三行每行都向右移动一个移动宽度 "},{"title":"ios bug","baseurl":"","url":"/ios/2014/09/10/ios-bug.html","date":"2014-09-10 17:54:52 +0800","categories":["ios"],"body":"iOS 7 Q: ios7中使用UISearchDisplayController进行搜索 输入内容然后滑动searchResultsTableView然后取消 再次点击搜索 输入内容之后点search 然后在取消 这样重复几次UISearchDisplayController的contentSize就会不正确的能向下滑动很长 A: #pragma mark - UISearchDisplayDelegate - (void)searchDisplayController:(UISearchDisplayController *)controller willShowSearchResultsTableView:(UITableView *)tableView { tableView.contentInset = UIEdgeInsetsZero; tableView.scrollIndicatorInsets = UIEdgeInsetsZero; } "},{"title":"project cannot build on iphone5s","baseurl":"","url":"/ios/2014/09/15/project-cannot-build-on-iphone5s.html","date":"2014-09-15 22:19:52 +0800","categories":["ios"],"body":"No architectures to compile for (ONLY ACTIVE ARCH=YES, active arch=arm64, VALID_ARCHS=armv7 armv7s). Xcode 5.1 - No architectures to compile for (ONLY ACTIVE ARCH=YES, active arch=x86 64, VALID ARCHS=i386) Delete the \"Pods\" project from the workspace in the left pane of Xcode and close Xcode. Run \"pod install\" from the command line to recreate the \"Pods\" project. Re-open Xcode and make sure \"Build Active Architecture Only\" is set to \"No\" in the build settings of both the \"Pods\" project and your own project. Clean and build. "},{"title":"curl note","baseurl":"","url":"/terminal/2014/09/16/curl-note.html","date":"2014-09-16 17:55:50 +0800","categories":["terminal"],"body":"抓取页面内容到一个文件中 curl -o file.html http://www.baidu.com "},{"title":"spotlight no result","baseurl":"","url":"/mac/2014/09/26/spotlight-no-result.html","date":"2014-09-26 19:06:50 +0800","categories":["mac"],"body":"link $sudo mdutil -E /Volumes/Macintosh\\ HD/ $sudo mdutil -a -i on "},{"title":"block note","baseurl":"","url":"/ios/2014/09/29/block-note.html","date":"2014-09-29 19:13:52 +0800","categories":["ios"],"body":"use block as local var void (^someBlock)(NSMutableArray *,id) = ^(NSMutableArray *items,NSString *item) { //do some thing } } }; someBlock(items, item); use block as type 1 @property (nonatomic, strong) returnType(^propertyName)(arguments); e.g. @property (nonatomic, strong) void(^onSelectedCustomer)(NSArray *customers); 2 typedef returnType(^name)(arguments); e.g. typedef void(^BlockType)(id); @property (nonatomic, strong) BlockType block; use block as method parameter - (void)methodWithBlock:(returnType(^)(arguments))block e.g. - (void)loginAnimated:(BOOL)animated completion:(void(^)(void))completion failed:(void(^)(void))failed; "},{"title":"chmod","baseurl":"","url":"/terminal/2014/09/30/chmod.html","date":"2014-09-30 01:38:50 +0800","categories":["terminal"],"body":"link 方式一： 语法格式： chmod [-vR] mode 文件名 参数说明: mode 权限设置字串,格式为[ugoa] [+-=] [rwx] u 表示文件的拥有者 g 表示与此文件拥有者属于一个组群的人 o 表示其他人 a 表示包含以上三者即文件拥有者(u)、群组(g)、其他(o) + 表示增加权限 - 表示取消权限 = 表示唯一设置权限 r 表示有读取的权限 w 表示有写入的权限 x 表示有执行的权限 -v 显示权限改变的详细资料 -R 表示对当前目录下的所有文件和子目录进行相同的权限更改 例： 我们要将当前目录下name这个文件的权限修为所有用户拥有该文件的读取、写入、执行的权限。 $ chmod a+rwx name 或者使用 $ chmod ugo+rwx name 方式二： 语法格式： chmod [-vR] [No] 文件名 参数说明: No 三位代表相应权限的数字 -v 显示权限改变的详细资料 -R 表示对当前目录下的所有文件和子目录进行相同的权限更改 可能这种方式对于初学者来说有一定的难度，但这种方法学会后在更改文件权限就变得非常的简单。相信通过我的介绍大家会掌握种方法的:) 首先了解一下读取(r)、写入(w)、执行(x)相应的数字编号，如下图所示 "},{"title":"mac 自定义 menu item keyboard shortcut","baseurl":"","url":"/mac/2014/10/01/custom-keyboard-shortcuts.html","date":"2014-10-01 06:06:50 +0800","categories":["mac"],"body":"很多menu item 没得原生快捷键 比如 Xcode 的 Archive System Preferences -> Keyboard -> Shortcuts -> App Shortcuts -> plus button OK~ "},{"title":"url schemes","baseurl":"","url":"/ios/2014/10/09/url-schemes.html","date":"2014-10-09 22:13:52 +0800","categories":["ios"],"body":"prefs:root=General&path=About prefs:root=General&path=ACCESSIBILITY prefs:root=AIRPLANE_MODE prefs:root=General&path=AUTOLOCK prefs:root=General&path=USAGE/CELLULAR_USAGE prefs:root=General&path=Bluetooth prefs:root=General&path=DATE AND TIME prefs:root=FACETIME prefs:root=General prefs:root=General&path=Keyboard prefs:root=CASTLE prefs:root=CASTLE&path=STORAGE AND BACKUP prefs:root=General&path=INTERNATIONAL prefs:root=LOCATION_SERVICES prefs:root=ACCOUNT_SETTINGS prefs:root=MUSIC prefs:root=MUSIC&path=EQ prefs:root=MUSIC&path=VolumeLimit prefs:root=General&path=Network prefs:root=NIKE PLUS IPOD prefs:root=NOTES prefs:root=NOTIFICATIONS_ID prefs:root=Phone prefs:root=Photos prefs:root=General&path=ManagedConfigurationList prefs:root=General&path=Reset prefs:root=Sounds&path=Ringtone prefs:root=Safari prefs:root=General&path=Assistant prefs:root=Sounds prefs:root=General&path=SOFTWARE UPDATE LINK prefs:root=STORE prefs:root=TWITTER prefs:root=General&path=USAGE prefs:root=VIDEO prefs:root=General&path=Network/VPN prefs:root=Wallpaper prefs:root=WIFI prefs:root=INTERNET_TETHERING "},{"title":"python setting on windows7","baseurl":"","url":"/python/2014/10/11/python-setting-on-windows7.html","date":"2014-10-11 18:56:50 +0800","categories":["python"],"body":" 下载 Python:http://www.python.org/getit/ Python环境变量 右键我的电脑，高级设置找到环境变量 在系统变量中找到Path，并在变量值最后加上python的安装路径 ;d:\\python27 再找到PATHEXT，在变量值最后加上后缀 ;.PY;.PYM "},{"title":"code format","baseurl":"","url":"/ios/2014/10/15/code-format.html","date":"2014-10-15 23:07:52 +0800","categories":["ios"],"body":"download BBUncrustifyPlugin download BBUncrustifyPlugin and install open Xcode Edit -> Format Code -> BBUncrustifyPlugin Prefreences set Formatter to Uncrustify open Terminal run git clone https://github.com/bumaociyuan/uncrustify.cfg .uncrustify set shortcut for Format Active File with this article download UncrustifyX download UncrustifyX UncrustifyX allows importing and exporting of Uncrustify .cfg files, and provides a GUI to run a configuration set on a list of files, or direct source code input. Have fun "},{"title":"run shell script by double click","baseurl":"","url":"/terminal/2014/10/16/run-shell-script-by-double-click.html","date":"2014-10-16 22:38:50 +0800","categories":["terminal"],"body":"file name as auto_synch_this_path.command content as cd `dirname $0`;git status;git add -A;git commit -m 'zx';git pull;git push $ chmod a+x auto_synch_this_path.command now can run this script by double click "},{"title":"app store short url","baseurl":"","url":"/ios/2014/10/19/app-store-short-url.html","date":"2014-10-19 06:39:52 +0800","categories":["ios"],"body":"link Company Name iOS: http://appstore.com/ for example, http://appstore.com/apple Mac: http://appstore.com/mac/ for example, http://appstore.com/mac/apple App Name iOS: http://appstore.com/ for example, http://appstore.com/keynote Mac: http://appstore.com/mac/ for example, http://appstore.com/mac/keynote App by Company iOS: http://appstore.com/ / for example, http://appstore.com/apple/keynote Mac: http://appstore.com/mac/ / for example, http://appstore.com/mac/apple/keynote "},{"title":"【转】如何高效利用GitHub","baseurl":"","url":"/git/2014/10/21/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%88%A9%E7%94%A8GitHub.html","date":"2014-10-21 02:26:50 +0800","categories":["git"],"body":"link "},{"title":"ios app 安装机制","baseurl":"","url":"/ios/2014/10/21/ios-app-%E5%AE%89%E8%A3%85%E6%9C%BA%E5%88%B6.html","date":"2014-10-21 21:39:52 +0800","categories":["ios"],"body":"iphone 上安装app最正规的途径 是 App Store 下载 ，本文是讨论的是 非主流安装机制 iphone 上安装app的非主流安装机制 有以下几种 Ad hoc 证书打包 参考官方文档 #苹果官方提供给ios 开发者的内测机制 企业级证书打包 #申请企业级证书 打包ipa 并安装 第三方应用商店安装（越狱和非越狱两种， 本文暂不讨论 ） 打包机制讨论： Ad hoc 证书打包，只能为Apple Developer Center 里面注册的设备（至多100个设备）安装app 企业级 证书打包（无设备数量限制） 安装方式： 用户下载ipa文件至电脑，通过iTunes（或者三方手机助手pc端）的同步app功能，把ipa同步到手机，完成安装 用户下载ipa文件至手机，通过第三方手机助手iphone端（如 同步推 ）的选择用同步推打开，并点击安装，完成安装 远程安装通过苹果提供的 itms-services 协议,完成安装。（参考 Ad hoc 教程 3 ==> ipa 的远程安装 ） 问题来了 开发时如何简单的打包ipa，并通过ota安装到手机？ 有以下两种方式 用IIS或者 python脚本 配置一个https的服务器（不推荐），推荐使用github的raw功能 参考demo-plist ，将plist文件（ plist字段详解 ）放在服务器上，通过写一个页面，或者应用内部打开，手动在Safari地址栏输入 itms-services://?action=download-manifest&url=plistUrl ,完成安装 在Mac上直接使用 terminal cd到ipa目录，并用 python -m SimpleHTTPServer 端口号 建立一个SimpleHTTPServer，通过iphone访问本机ip加端口号，下载ipa到手机用 安装方式2 完成安装 "},{"title":"jekyll blog theme","baseurl":"","url":"/jekyll/2014/10/23/jekyll-blog-theme.html","date":"2014-10-23 18:06:50 +0800","categories":["jekyll"],"body":"http://themes.jekyllbootstrap.com http://jekyllbootstrap.com/usage/jekyll-quick-start.html Find Themes http://themes.jekyllbootstrap.com Install Themes rake theme:install git=\"https://github.com/jekyllbootstrap/theme-the-program.git\" if build error is If you haven't initialized your submodule * just add [submodule \"_theme_packages/theme-name\"] path = _theme_packages/theme-name url = https://github.com/theme-name/theme-name.git ignore = dirty cd the submodule's directory, run git submodule init , then git submodule update . commit and push your changes to trigger another build on our servers. Switch Themes rake theme:switch name=\"the-program\" "},{"title":"shell script create post template","baseurl":"","url":"/terminal/2014/10/26/shell-script-create-post-template.html","date":"2014-10-26 08:37:43 +0800","categories":["terminal"],"body":"script "},{"title":"automator pass arg to shell script","baseurl":"","url":"/terminal/2014/10/26/automator-pass-arg-to-shell-script.html","date":"2014-10-26 09:31:09 +0800","categories":["terminal"],"body":" pic says every thing "},{"title":"ruby note","baseurl":"","url":"/ruby/2014/10/27/ruby-note.html","date":"2014-10-27 21:59:15 +0800","categories":["ruby"],"body":"w3cschool tutorial Ruby 是一种完美的面向对象编程语言。面向对象编程语言的特性包括： 数据封装 数据抽象 多态性 继承 在 Ruby 中，类总是以关键字 class 开始，后跟类的名称。类名的首字母应该大写。类 Customer 如下所示： class Customer end Ruby 类中的变量 局部变量 ：局部变量是在方法中定义的变量。局部变量在方法外是不可用的。在后续的章节中，您将看到有关方法的更多细节。局部变量以小写字母或 _ 开始。 实例变量 ：实例变量可以跨任何特定的实例或对象中的方法使用。这意味着，实例变量可以从对象到对象的改变。实例变量在变量名之前放置符号（@）。 类变量 ：类变量可以跨不同的对象使用。类变量属于类，且是类的一个属性。类变量在变量名之前放置符号（@@）。 全局变量 ：类变量不能跨类使用。如果您想要有一个可以跨类使用的变量，您需要定义全局变量。全局变量总是以美元符号（$）开始。 （给全局变量赋值会改变全局状态，所以不建议使用全局变量） "}]}